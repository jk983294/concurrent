2 core share the same L1 cache

sequentially consistent: execute the program you wrote
race condition: a memory location(variable) can be simultaneously accessed by two threads, and at least one thread is a writer

Peterson algorithm
Thread1:                            |   Thread2:
flag1 = 1; // a: declare intent     |   flag2 = 1; // c: declare intent
if(flag2 != 0) // b                 |   if(flag1 != 0) // d
    // resolve contention           |       // resolve contention
else                                |   else
    // enter critical section       |       // enter critical section

Problem with reorder: if a pass b, or c can pass d, then breaks
Solution 1: use suitable atomic type (volatile for Java, std::atomic<> for c++11)
Solution 2: use system lock instead of rolling your own
Solution 3: write memory barrier after a and c

optimization:
compiler know all memory operations in this thread
compiler doesn't know mutable shared variables


int a = 1;                  |   lock.lock();    // for acquire barrier, you can move instructions down but not up
lock.lock();                |   int a = 1;
int b = 2;                  |   int b = 2;
lock.unlock();              |   int c = 3;
int c = 3;                  |   lock.unlock();  // for release barrier, you can move instructions up but not down

acquire load: enter critical section, see others' store
release store: leave critical section, it makes its prior access visible to a acquire load

std::atomic : read = acquire, write = release

while(val.compare_exchange_weak(expected, desired)){};    // am I the one who gets to change val from expected to desired ?
prefer compare_exchange_weak if you are going to write CAS loop anyway.
use compare_exchange_strong when doing a single test instead of a loop

memory barrier
__asm__("mfence");

store do more work, it need to do cache coherency
load is cheap, only read from cache

Code Generation
        OrdinaryLoad    |   AtomicLoad  |   OrdinaryStore   |   AtomicStore     |   CAS
x86/x64     mov             mov             mov                 xchg                cmpxchg
IA64        ld              ld.acq          st                  st.rel;mf           cmpxchg.rel;mf

relax: one small step less than sequencially consistent
relaxed means only keep atomic operation but don't prevent instruction reordering, usually used in counter
count.fetch_add(1, memory_order_relaxed);
count.load(memory_order_relaxed);
